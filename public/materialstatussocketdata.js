// source: efflux.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.efflux.MaterialStatusSocketData');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.efflux.MaterialStatusSocketData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.efflux.MaterialStatusSocketData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.efflux.MaterialStatusSocketData.displayName = 'proto.efflux.MaterialStatusSocketData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.efflux.MaterialStatusSocketData.prototype.toObject = function(opt_includeInstance) {
  return proto.efflux.MaterialStatusSocketData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.efflux.MaterialStatusSocketData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.efflux.MaterialStatusSocketData.toObject = function(includeInstance, msg) {
  var f, obj = {
    o2: jspb.Message.getFieldWithDefault(msg, 1, 0),
    glucose: jspb.Message.getFieldWithDefault(msg, 2, 0),
    vitamin: jspb.Message.getFieldWithDefault(msg, 3, 0),
    co2: jspb.Message.getFieldWithDefault(msg, 4, 0),
    creatinine: jspb.Message.getFieldWithDefault(msg, 5, 0),
    growth: jspb.Message.getFieldWithDefault(msg, 6, 0),
    hunger: jspb.Message.getFieldWithDefault(msg, 7, 0),
    asphyxia: jspb.Message.getFieldWithDefault(msg, 8, 0),
    inflammation: jspb.Message.getFieldWithDefault(msg, 9, 0),
    gCsf: jspb.Message.getFieldWithDefault(msg, 10, 0),
    mCsf: jspb.Message.getFieldWithDefault(msg, 11, 0),
    il3: jspb.Message.getFieldWithDefault(msg, 12, 0),
    il2: jspb.Message.getFieldWithDefault(msg, 13, 0),
    viralLoad: jspb.Message.getFieldWithDefault(msg, 14, 0),
    antibodyLoad: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.efflux.MaterialStatusSocketData}
 */
proto.efflux.MaterialStatusSocketData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.efflux.MaterialStatusSocketData;
  return proto.efflux.MaterialStatusSocketData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.efflux.MaterialStatusSocketData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.efflux.MaterialStatusSocketData}
 */
proto.efflux.MaterialStatusSocketData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setO2(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGlucose(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVitamin(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCo2(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreatinine(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrowth(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHunger(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAsphyxia(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInflammation(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGCsf(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMCsf(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIl3(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIl2(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViralLoad(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAntibodyLoad(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.efflux.MaterialStatusSocketData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.efflux.MaterialStatusSocketData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.efflux.MaterialStatusSocketData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.efflux.MaterialStatusSocketData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getO2();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGlucose();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getVitamin();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCo2();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getCreatinine();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getGrowth();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getHunger();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAsphyxia();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getInflammation();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getGCsf();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getMCsf();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getIl3();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getIl2();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getViralLoad();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getAntibodyLoad();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
};


/**
 * optional int32 o2 = 1;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getO2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setO2 = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 glucose = 2;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getGlucose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setGlucose = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 vitamin = 3;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getVitamin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setVitamin = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 co2 = 4;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getCo2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setCo2 = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 creatinine = 5;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getCreatinine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setCreatinine = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 growth = 6;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getGrowth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setGrowth = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 hunger = 7;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getHunger = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setHunger = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 asphyxia = 8;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getAsphyxia = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setAsphyxia = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 inflammation = 9;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getInflammation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setInflammation = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 g_csf = 10;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getGCsf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setGCsf = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 m_csf = 11;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getMCsf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setMCsf = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 il_3 = 12;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getIl3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setIl3 = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 il_2 = 13;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getIl2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setIl2 = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 viral_load = 14;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getViralLoad = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setViralLoad = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 antibody_load = 15;
 * @return {number}
 */
proto.efflux.MaterialStatusSocketData.prototype.getAntibodyLoad = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.efflux.MaterialStatusSocketData} returns this
 */
proto.efflux.MaterialStatusSocketData.prototype.setAntibodyLoad = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


