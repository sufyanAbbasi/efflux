// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.19.1
// source: efflux.proto

package main

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CellType int32

const (
	CellType_CellTypeUnknown     CellType = 0
	CellType_Bacteria            CellType = 1 // A baseline prokaryotic cell.
	CellType_Bacteroidota        CellType = 2 // Bacteria that synthesize vitamins in the gut.
	CellType_RedBlood            CellType = 3
	CellType_Neuron              CellType = 4
	CellType_Cardiomyocyte       CellType = 5  // Heart Cell
	CellType_Pneumocyte          CellType = 6  // Pulmonary Cell
	CellType_Myocyte             CellType = 7  // Muscle Cell
	CellType_Keratinocyte        CellType = 8  // Skin Cell
	CellType_Enterocyte          CellType = 9  // Gut Lining Cell
	CellType_Podocyte            CellType = 10 // Kidney Cell
	CellType_Hemocytoblast       CellType = 11 // Bone Marrow Stem Cell, spawns Lymphoblast, Monocyte, and Myeloblast
	CellType_Lymphoblast         CellType = 12 // Stem Cell, becomes NK, B cells, T cells
	CellType_Myeloblast          CellType = 13 // Stem Cell, becomes Neutrophil (also Macrophages and Dendritic cells but n
	CellType_Monocyte            CellType = 14 // Stem Cell, becomes Macrophages and Dendritic cells
	CellType_Macrophagocyte      CellType = 15 // Macrophage
	CellType_Dendritic           CellType = 16 // Dendritic Cells
	CellType_Neutrocyte          CellType = 17 // Neutrophils
	CellType_NaturalKillerCell   CellType = 18 // Natural Killer Cell
	CellType_VirginTLymphocyte   CellType = 19 // Virgin T Cell
	CellType_HelperTLymphocyte   CellType = 20 // Helper T Cell
	CellType_KillerTLymphocyte   CellType = 21 // Killer T Cell
	CellType_BLymphocyte         CellType = 22 // B Cell
	CellType_EffectorBLymphocyte CellType = 23 // Plasma Cell
	CellType_ViralLoadCarrier    CellType = 24 // A dummy cell that carries a virus. Always make sure this is last.
)

// Enum value maps for CellType.
var (
	CellType_name = map[int32]string{
		0:  "CellTypeUnknown",
		1:  "Bacteria",
		2:  "Bacteroidota",
		3:  "RedBlood",
		4:  "Neuron",
		5:  "Cardiomyocyte",
		6:  "Pneumocyte",
		7:  "Myocyte",
		8:  "Keratinocyte",
		9:  "Enterocyte",
		10: "Podocyte",
		11: "Hemocytoblast",
		12: "Lymphoblast",
		13: "Myeloblast",
		14: "Monocyte",
		15: "Macrophagocyte",
		16: "Dendritic",
		17: "Neutrocyte",
		18: "NaturalKillerCell",
		19: "VirginTLymphocyte",
		20: "HelperTLymphocyte",
		21: "KillerTLymphocyte",
		22: "BLymphocyte",
		23: "EffectorBLymphocyte",
		24: "ViralLoadCarrier",
	}
	CellType_value = map[string]int32{
		"CellTypeUnknown":     0,
		"Bacteria":            1,
		"Bacteroidota":        2,
		"RedBlood":            3,
		"Neuron":              4,
		"Cardiomyocyte":       5,
		"Pneumocyte":          6,
		"Myocyte":             7,
		"Keratinocyte":        8,
		"Enterocyte":          9,
		"Podocyte":            10,
		"Hemocytoblast":       11,
		"Lymphoblast":         12,
		"Myeloblast":          13,
		"Monocyte":            14,
		"Macrophagocyte":      15,
		"Dendritic":           16,
		"Neutrocyte":          17,
		"NaturalKillerCell":   18,
		"VirginTLymphocyte":   19,
		"HelperTLymphocyte":   20,
		"KillerTLymphocyte":   21,
		"BLymphocyte":         22,
		"EffectorBLymphocyte": 23,
		"ViralLoadCarrier":    24,
	}
)

func (x CellType) Enum() *CellType {
	p := new(CellType)
	*p = x
	return p
}

func (x CellType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellType) Descriptor() protoreflect.EnumDescriptor {
	return file_efflux_proto_enumTypes[0].Descriptor()
}

func (CellType) Type() protoreflect.EnumType {
	return &file_efflux_proto_enumTypes[0]
}

func (x CellType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellType.Descriptor instead.
func (CellType) EnumDescriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{0}
}

type WorkType int32

const (
	WorkType_nothing   WorkType = 0
	WorkType_diffusion WorkType = 1
	WorkType_cover     WorkType = 2 // Called on skin cells by muscle cells. Will randomly fail, i.e. cuts.
	WorkType_exchange  WorkType = 3 // Called on blood cells by other cells.
	WorkType_exhale    WorkType = 4 // Called on lung cells by blood cells.
	WorkType_pump      WorkType = 5 // Called on to heart cells to pump, by brain cels.
	WorkType_move      WorkType = 6 // Called on muscle cells by brain cells.
	WorkType_think     WorkType = 7 // Called on brain cells to perform a computation, by muscle cells.
	WorkType_digest    WorkType = 8 // Called on gut cells, by muscle cells.
	WorkType_filter    WorkType = 9 // Called on kidney cells, by blood cells.
)

// Enum value maps for WorkType.
var (
	WorkType_name = map[int32]string{
		0: "nothing",
		1: "diffusion",
		2: "cover",
		3: "exchange",
		4: "exhale",
		5: "pump",
		6: "move",
		7: "think",
		8: "digest",
		9: "filter",
	}
	WorkType_value = map[string]int32{
		"nothing":   0,
		"diffusion": 1,
		"cover":     2,
		"exchange":  3,
		"exhale":    4,
		"pump":      5,
		"move":      6,
		"think":     7,
		"digest":    8,
		"filter":    9,
	}
)

func (x WorkType) Enum() *WorkType {
	p := new(WorkType)
	*p = x
	return p
}

func (x WorkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkType) Descriptor() protoreflect.EnumDescriptor {
	return file_efflux_proto_enumTypes[1].Descriptor()
}

func (WorkType) Type() protoreflect.EnumType {
	return &file_efflux_proto_enumTypes[1]
}

func (x WorkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkType.Descriptor instead.
func (WorkType) EnumDescriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{1}
}

type CytokineType int32

const (
	CytokineType_unknown           CytokineType = 0
	CytokineType_cell_damage       CytokineType = 1
	CytokineType_cell_stressed     CytokineType = 2
	CytokineType_antigen_present   CytokineType = 3
	CytokineType_induce_chemotaxis CytokineType = 4
	CytokineType_cytotoxins        CytokineType = 5
)

// Enum value maps for CytokineType.
var (
	CytokineType_name = map[int32]string{
		0: "unknown",
		1: "cell_damage",
		2: "cell_stressed",
		3: "antigen_present",
		4: "induce_chemotaxis",
		5: "cytotoxins",
	}
	CytokineType_value = map[string]int32{
		"unknown":           0,
		"cell_damage":       1,
		"cell_stressed":     2,
		"antigen_present":   3,
		"induce_chemotaxis": 4,
		"cytotoxins":        5,
	}
)

func (x CytokineType) Enum() *CytokineType {
	p := new(CytokineType)
	*p = x
	return p
}

func (x CytokineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CytokineType) Descriptor() protoreflect.EnumDescriptor {
	return file_efflux_proto_enumTypes[2].Descriptor()
}

func (CytokineType) Type() protoreflect.EnumType {
	return &file_efflux_proto_enumTypes[2]
}

func (x CytokineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CytokineType.Descriptor instead.
func (CytokineType) EnumDescriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{2}
}

type NanobotType int32

const (
	NanobotType_NanobotUnknown NanobotType = 0
	NanobotType_Nanobot        NanobotType = 1
)

// Enum value maps for NanobotType.
var (
	NanobotType_name = map[int32]string{
		0: "NanobotUnknown",
		1: "Nanobot",
	}
	NanobotType_value = map[string]int32{
		"NanobotUnknown": 0,
		"Nanobot":        1,
	}
)

func (x NanobotType) Enum() *NanobotType {
	p := new(NanobotType)
	*p = x
	return p
}

func (x NanobotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NanobotType) Descriptor() protoreflect.EnumDescriptor {
	return file_efflux_proto_enumTypes[3].Descriptor()
}

func (NanobotType) Type() protoreflect.EnumType {
	return &file_efflux_proto_enumTypes[3]
}

func (x NanobotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NanobotType.Descriptor instead.
func (NanobotType) EnumDescriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{3}
}

type CellActionStatus int32

const (
	CellActionStatus_do_nothing   CellActionStatus = 0
	CellActionStatus_repair       CellActionStatus = 1
	CellActionStatus_incur_damage CellActionStatus = 2
	CellActionStatus_despawn      CellActionStatus = 3
	CellActionStatus_apoptosis    CellActionStatus = 4
	CellActionStatus_do_work      CellActionStatus = 5
	CellActionStatus_transport    CellActionStatus = 6
	CellActionStatus_mitosis      CellActionStatus = 7
)

// Enum value maps for CellActionStatus.
var (
	CellActionStatus_name = map[int32]string{
		0: "do_nothing",
		1: "repair",
		2: "incur_damage",
		3: "despawn",
		4: "apoptosis",
		5: "do_work",
		6: "transport",
		7: "mitosis",
	}
	CellActionStatus_value = map[string]int32{
		"do_nothing":   0,
		"repair":       1,
		"incur_damage": 2,
		"despawn":      3,
		"apoptosis":    4,
		"do_work":      5,
		"transport":    6,
		"mitosis":      7,
	}
)

func (x CellActionStatus) Enum() *CellActionStatus {
	p := new(CellActionStatus)
	*p = x
	return p
}

func (x CellActionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CellActionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_efflux_proto_enumTypes[4].Descriptor()
}

func (CellActionStatus) Type() protoreflect.EnumType {
	return &file_efflux_proto_enumTypes[4]
}

func (x CellActionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CellActionStatus.Descriptor instead.
func (CellActionStatus) EnumDescriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{4}
}

type InteractionType int32

const (
	InteractionType_ping          InteractionType = 0
	InteractionType_close         InteractionType = 1
	InteractionType_move_to       InteractionType = 2
	InteractionType_follow        InteractionType = 3
	InteractionType_attach        InteractionType = 4
	InteractionType_detach        InteractionType = 5
	InteractionType_info          InteractionType = 6
	InteractionType_drop_cytokine InteractionType = 7
)

// Enum value maps for InteractionType.
var (
	InteractionType_name = map[int32]string{
		0: "ping",
		1: "close",
		2: "move_to",
		3: "follow",
		4: "attach",
		5: "detach",
		6: "info",
		7: "drop_cytokine",
	}
	InteractionType_value = map[string]int32{
		"ping":          0,
		"close":         1,
		"move_to":       2,
		"follow":        3,
		"attach":        4,
		"detach":        5,
		"info":          6,
		"drop_cytokine": 7,
	}
)

func (x InteractionType) Enum() *InteractionType {
	p := new(InteractionType)
	*p = x
	return p
}

func (x InteractionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionType) Descriptor() protoreflect.EnumDescriptor {
	return file_efflux_proto_enumTypes[5].Descriptor()
}

func (InteractionType) Type() protoreflect.EnumType {
	return &file_efflux_proto_enumTypes[5]
}

func (x InteractionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionType.Descriptor instead.
func (InteractionType) EnumDescriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{5}
}

type InteractionResponse_Status int32

const (
	InteractionResponse_failure InteractionResponse_Status = 0
	InteractionResponse_success InteractionResponse_Status = 1
)

// Enum value maps for InteractionResponse_Status.
var (
	InteractionResponse_Status_name = map[int32]string{
		0: "failure",
		1: "success",
	}
	InteractionResponse_Status_value = map[string]int32{
		"failure": 0,
		"success": 1,
	}
)

func (x InteractionResponse_Status) Enum() *InteractionResponse_Status {
	p := new(InteractionResponse_Status)
	*p = x
	return p
}

func (x InteractionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_efflux_proto_enumTypes[6].Descriptor()
}

func (InteractionResponse_Status) Type() protoreflect.EnumType {
	return &file_efflux_proto_enumTypes[6]
}

func (x InteractionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractionResponse_Status.Descriptor instead.
func (InteractionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{16, 0}
}

type WorkSocketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkType  int32                `protobuf:"varint,1,opt,name=work_type,json=workType,proto3" json:"work_type,omitempty"`
	Result    string               `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Status    int32                `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	Diffusion *DiffusionSocketData `protobuf:"bytes,4,opt,name=diffusion,proto3" json:"diffusion,omitempty"`
}

func (x *WorkSocketData) Reset() {
	*x = WorkSocketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkSocketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkSocketData) ProtoMessage() {}

func (x *WorkSocketData) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkSocketData.ProtoReflect.Descriptor instead.
func (*WorkSocketData) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{0}
}

func (x *WorkSocketData) GetWorkType() int32 {
	if x != nil {
		return x.WorkType
	}
	return 0
}

func (x *WorkSocketData) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *WorkSocketData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WorkSocketData) GetDiffusion() *DiffusionSocketData {
	if x != nil {
		return x.Diffusion
	}
	return nil
}

type ResourceBlobSocketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	O2       int32 `protobuf:"varint,1,opt,name=o2,proto3" json:"o2,omitempty"`
	Glucose  int32 `protobuf:"varint,2,opt,name=glucose,proto3" json:"glucose,omitempty"`
	Vitamins int32 `protobuf:"varint,3,opt,name=vitamins,proto3" json:"vitamins,omitempty"`
}

func (x *ResourceBlobSocketData) Reset() {
	*x = ResourceBlobSocketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceBlobSocketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceBlobSocketData) ProtoMessage() {}

func (x *ResourceBlobSocketData) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceBlobSocketData.ProtoReflect.Descriptor instead.
func (*ResourceBlobSocketData) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceBlobSocketData) GetO2() int32 {
	if x != nil {
		return x.O2
	}
	return 0
}

func (x *ResourceBlobSocketData) GetGlucose() int32 {
	if x != nil {
		return x.Glucose
	}
	return 0
}

func (x *ResourceBlobSocketData) GetVitamins() int32 {
	if x != nil {
		return x.Vitamins
	}
	return 0
}

type WasteBlobSocketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CO2        int32 `protobuf:"varint,1,opt,name=c_o2,json=cO2,proto3" json:"c_o2,omitempty"`
	Creatinine int32 `protobuf:"varint,2,opt,name=creatinine,proto3" json:"creatinine,omitempty"`
}

func (x *WasteBlobSocketData) Reset() {
	*x = WasteBlobSocketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WasteBlobSocketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WasteBlobSocketData) ProtoMessage() {}

func (x *WasteBlobSocketData) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WasteBlobSocketData.ProtoReflect.Descriptor instead.
func (*WasteBlobSocketData) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{2}
}

func (x *WasteBlobSocketData) GetCO2() int32 {
	if x != nil {
		return x.CO2
	}
	return 0
}

func (x *WasteBlobSocketData) GetCreatinine() int32 {
	if x != nil {
		return x.Creatinine
	}
	return 0
}

type HormoneBlobSocketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GranulocyteColonyStimulatingFactor int32 `protobuf:"varint,1,opt,name=granulocyte_colony_stimulating_factor,json=granulocyteColonyStimulatingFactor,proto3" json:"granulocyte_colony_stimulating_factor,omitempty"`
	MacrophageColonyStimulatingFactor  int32 `protobuf:"varint,2,opt,name=macrophage_colony_stimulating_factor,json=macrophageColonyStimulatingFactor,proto3" json:"macrophage_colony_stimulating_factor,omitempty"`
	Interleukin3                       int32 `protobuf:"varint,3,opt,name=interleukin3,proto3" json:"interleukin3,omitempty"`
	Interleukin2                       int32 `protobuf:"varint,4,opt,name=interleukin2,proto3" json:"interleukin2,omitempty"`
}

func (x *HormoneBlobSocketData) Reset() {
	*x = HormoneBlobSocketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HormoneBlobSocketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HormoneBlobSocketData) ProtoMessage() {}

func (x *HormoneBlobSocketData) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HormoneBlobSocketData.ProtoReflect.Descriptor instead.
func (*HormoneBlobSocketData) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{3}
}

func (x *HormoneBlobSocketData) GetGranulocyteColonyStimulatingFactor() int32 {
	if x != nil {
		return x.GranulocyteColonyStimulatingFactor
	}
	return 0
}

func (x *HormoneBlobSocketData) GetMacrophageColonyStimulatingFactor() int32 {
	if x != nil {
		return x.MacrophageColonyStimulatingFactor
	}
	return 0
}

func (x *HormoneBlobSocketData) GetInterleukin3() int32 {
	if x != nil {
		return x.Interleukin3
	}
	return 0
}

func (x *HormoneBlobSocketData) GetInterleukin2() int32 {
	if x != nil {
		return x.Interleukin2
	}
	return 0
}

type AntigenBlobSocketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AntibodyProteins       []int32 `protobuf:"varint,1,rep,packed,name=antibody_proteins,json=antibodyProteins,proto3" json:"antibody_proteins,omitempty"`
	AntibodyConcentrations []int64 `protobuf:"varint,2,rep,packed,name=antibody_concentrations,json=antibodyConcentrations,proto3" json:"antibody_concentrations,omitempty"`
}

func (x *AntigenBlobSocketData) Reset() {
	*x = AntigenBlobSocketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntigenBlobSocketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntigenBlobSocketData) ProtoMessage() {}

func (x *AntigenBlobSocketData) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntigenBlobSocketData.ProtoReflect.Descriptor instead.
func (*AntigenBlobSocketData) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{4}
}

func (x *AntigenBlobSocketData) GetAntibodyProteins() []int32 {
	if x != nil {
		return x.AntibodyProteins
	}
	return nil
}

func (x *AntigenBlobSocketData) GetAntibodyConcentrations() []int64 {
	if x != nil {
		return x.AntibodyConcentrations
	}
	return nil
}

type DiffusionSocketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources *ResourceBlobSocketData `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	Waste     *WasteBlobSocketData    `protobuf:"bytes,2,opt,name=waste,proto3" json:"waste,omitempty"`
	Hormone   *HormoneBlobSocketData  `protobuf:"bytes,3,opt,name=hormone,proto3" json:"hormone,omitempty"`
	Antigen   *AntigenBlobSocketData  `protobuf:"bytes,4,opt,name=antigen,proto3" json:"antigen,omitempty"`
}

func (x *DiffusionSocketData) Reset() {
	*x = DiffusionSocketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffusionSocketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffusionSocketData) ProtoMessage() {}

func (x *DiffusionSocketData) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffusionSocketData.ProtoReflect.Descriptor instead.
func (*DiffusionSocketData) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{5}
}

func (x *DiffusionSocketData) GetResources() *ResourceBlobSocketData {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *DiffusionSocketData) GetWaste() *WasteBlobSocketData {
	if x != nil {
		return x.Waste
	}
	return nil
}

func (x *DiffusionSocketData) GetHormone() *HormoneBlobSocketData {
	if x != nil {
		return x.Hormone
	}
	return nil
}

func (x *DiffusionSocketData) GetAntigen() *AntigenBlobSocketData {
	if x != nil {
		return x.Antigen
	}
	return nil
}

type WorkStatusSocketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkType              string `protobuf:"bytes,1,opt,name=work_type,json=workType,proto3" json:"work_type,omitempty"`
	RequestCount          int32  `protobuf:"varint,2,opt,name=request_count,json=requestCount,proto3" json:"request_count,omitempty"`
	SuccessCount          int32  `protobuf:"varint,3,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	FailureCount          int32  `protobuf:"varint,4,opt,name=failure_count,json=failureCount,proto3" json:"failure_count,omitempty"`
	CompletedCount        int32  `protobuf:"varint,5,opt,name=completed_count,json=completedCount,proto3" json:"completed_count,omitempty"`
	CompletedFailureCount int32  `protobuf:"varint,6,opt,name=completed_failure_count,json=completedFailureCount,proto3" json:"completed_failure_count,omitempty"`
}

func (x *WorkStatusSocketData) Reset() {
	*x = WorkStatusSocketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkStatusSocketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkStatusSocketData) ProtoMessage() {}

func (x *WorkStatusSocketData) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkStatusSocketData.ProtoReflect.Descriptor instead.
func (*WorkStatusSocketData) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{6}
}

func (x *WorkStatusSocketData) GetWorkType() string {
	if x != nil {
		return x.WorkType
	}
	return ""
}

func (x *WorkStatusSocketData) GetRequestCount() int32 {
	if x != nil {
		return x.RequestCount
	}
	return 0
}

func (x *WorkStatusSocketData) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *WorkStatusSocketData) GetFailureCount() int32 {
	if x != nil {
		return x.FailureCount
	}
	return 0
}

func (x *WorkStatusSocketData) GetCompletedCount() int32 {
	if x != nil {
		return x.CompletedCount
	}
	return 0
}

func (x *WorkStatusSocketData) GetCompletedFailureCount() int32 {
	if x != nil {
		return x.CompletedFailureCount
	}
	return 0
}

type MaterialStatusSocketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	O2           int32 `protobuf:"varint,1,opt,name=o2,proto3" json:"o2,omitempty"`
	Glucose      int32 `protobuf:"varint,2,opt,name=glucose,proto3" json:"glucose,omitempty"`
	Vitamin      int32 `protobuf:"varint,3,opt,name=vitamin,proto3" json:"vitamin,omitempty"`
	Co2          int32 `protobuf:"varint,4,opt,name=co2,proto3" json:"co2,omitempty"`
	Creatinine   int32 `protobuf:"varint,5,opt,name=creatinine,proto3" json:"creatinine,omitempty"`
	Growth       int32 `protobuf:"varint,6,opt,name=growth,proto3" json:"growth,omitempty"`
	Hunger       int32 `protobuf:"varint,7,opt,name=hunger,proto3" json:"hunger,omitempty"`
	Asphyxia     int32 `protobuf:"varint,8,opt,name=asphyxia,proto3" json:"asphyxia,omitempty"`
	Inflammation int32 `protobuf:"varint,9,opt,name=inflammation,proto3" json:"inflammation,omitempty"`
	GCsf         int32 `protobuf:"varint,10,opt,name=g_csf,json=gCsf,proto3" json:"g_csf,omitempty"`
	MCsf         int32 `protobuf:"varint,11,opt,name=m_csf,json=mCsf,proto3" json:"m_csf,omitempty"`
	Il_3         int32 `protobuf:"varint,12,opt,name=il_3,json=il3,proto3" json:"il_3,omitempty"`
	Il_2         int32 `protobuf:"varint,13,opt,name=il_2,json=il2,proto3" json:"il_2,omitempty"`
	ViralLoad    int32 `protobuf:"varint,14,opt,name=viral_load,json=viralLoad,proto3" json:"viral_load,omitempty"`
	AntibodyLoad int32 `protobuf:"varint,15,opt,name=antibody_load,json=antibodyLoad,proto3" json:"antibody_load,omitempty"`
}

func (x *MaterialStatusSocketData) Reset() {
	*x = MaterialStatusSocketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaterialStatusSocketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterialStatusSocketData) ProtoMessage() {}

func (x *MaterialStatusSocketData) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterialStatusSocketData.ProtoReflect.Descriptor instead.
func (*MaterialStatusSocketData) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{7}
}

func (x *MaterialStatusSocketData) GetO2() int32 {
	if x != nil {
		return x.O2
	}
	return 0
}

func (x *MaterialStatusSocketData) GetGlucose() int32 {
	if x != nil {
		return x.Glucose
	}
	return 0
}

func (x *MaterialStatusSocketData) GetVitamin() int32 {
	if x != nil {
		return x.Vitamin
	}
	return 0
}

func (x *MaterialStatusSocketData) GetCo2() int32 {
	if x != nil {
		return x.Co2
	}
	return 0
}

func (x *MaterialStatusSocketData) GetCreatinine() int32 {
	if x != nil {
		return x.Creatinine
	}
	return 0
}

func (x *MaterialStatusSocketData) GetGrowth() int32 {
	if x != nil {
		return x.Growth
	}
	return 0
}

func (x *MaterialStatusSocketData) GetHunger() int32 {
	if x != nil {
		return x.Hunger
	}
	return 0
}

func (x *MaterialStatusSocketData) GetAsphyxia() int32 {
	if x != nil {
		return x.Asphyxia
	}
	return 0
}

func (x *MaterialStatusSocketData) GetInflammation() int32 {
	if x != nil {
		return x.Inflammation
	}
	return 0
}

func (x *MaterialStatusSocketData) GetGCsf() int32 {
	if x != nil {
		return x.GCsf
	}
	return 0
}

func (x *MaterialStatusSocketData) GetMCsf() int32 {
	if x != nil {
		return x.MCsf
	}
	return 0
}

func (x *MaterialStatusSocketData) GetIl_3() int32 {
	if x != nil {
		return x.Il_3
	}
	return 0
}

func (x *MaterialStatusSocketData) GetIl_2() int32 {
	if x != nil {
		return x.Il_2
	}
	return 0
}

func (x *MaterialStatusSocketData) GetViralLoad() int32 {
	if x != nil {
		return x.ViralLoad
	}
	return 0
}

func (x *MaterialStatusSocketData) GetAntibodyLoad() int32 {
	if x != nil {
		return x.AntibodyLoad
	}
	return 0
}

type StatusSocketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status         int32                     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Name           string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Connections    []string                  `protobuf:"bytes,3,rep,name=connections,proto3" json:"connections,omitempty"`
	WorkStatus     []*WorkStatusSocketData   `protobuf:"bytes,4,rep,name=work_status,json=workStatus,proto3" json:"work_status,omitempty"`
	MaterialStatus *MaterialStatusSocketData `protobuf:"bytes,5,opt,name=material_status,json=materialStatus,proto3" json:"material_status,omitempty"`
}

func (x *StatusSocketData) Reset() {
	*x = StatusSocketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusSocketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusSocketData) ProtoMessage() {}

func (x *StatusSocketData) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusSocketData.ProtoReflect.Descriptor instead.
func (*StatusSocketData) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{8}
}

func (x *StatusSocketData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *StatusSocketData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatusSocketData) GetConnections() []string {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *StatusSocketData) GetWorkStatus() []*WorkStatusSocketData {
	if x != nil {
		return x.WorkStatus
	}
	return nil
}

func (x *StatusSocketData) GetMaterialStatus() *MaterialStatusSocketData {
	if x != nil {
		return x.MaterialStatus
	}
	return nil
}

type RenderType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*RenderType_CellType
	//	*RenderType_CytokineType
	//	*RenderType_NanobotType
	Type isRenderType_Type `protobuf_oneof:"type"`
}

func (x *RenderType) Reset() {
	*x = RenderType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderType) ProtoMessage() {}

func (x *RenderType) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderType.ProtoReflect.Descriptor instead.
func (*RenderType) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{9}
}

func (m *RenderType) GetType() isRenderType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *RenderType) GetCellType() CellType {
	if x, ok := x.GetType().(*RenderType_CellType); ok {
		return x.CellType
	}
	return CellType_CellTypeUnknown
}

func (x *RenderType) GetCytokineType() CytokineType {
	if x, ok := x.GetType().(*RenderType_CytokineType); ok {
		return x.CytokineType
	}
	return CytokineType_unknown
}

func (x *RenderType) GetNanobotType() NanobotType {
	if x, ok := x.GetType().(*RenderType_NanobotType); ok {
		return x.NanobotType
	}
	return NanobotType_NanobotUnknown
}

type isRenderType_Type interface {
	isRenderType_Type()
}

type RenderType_CellType struct {
	CellType CellType `protobuf:"varint,4,opt,name=cell_type,json=cellType,proto3,enum=efflux.CellType,oneof"`
}

type RenderType_CytokineType struct {
	CytokineType CytokineType `protobuf:"varint,5,opt,name=cytokine_type,json=cytokineType,proto3,enum=efflux.CytokineType,oneof"`
}

type RenderType_NanobotType struct {
	NanobotType NanobotType `protobuf:"varint,6,opt,name=nanobot_type,json=nanobotType,proto3,enum=efflux.NanobotType,oneof"`
}

func (*RenderType_CellType) isRenderType_Type() {}

func (*RenderType_CytokineType) isRenderType_Type() {}

func (*RenderType_NanobotType) isRenderType_Type() {}

type RenderableSocketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Visible  bool        `protobuf:"varint,2,opt,name=visible,proto3" json:"visible,omitempty"`
	Position *Position   `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	Type     *RenderType `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *RenderableSocketData) Reset() {
	*x = RenderableSocketData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenderableSocketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenderableSocketData) ProtoMessage() {}

func (x *RenderableSocketData) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenderableSocketData.ProtoReflect.Descriptor instead.
func (*RenderableSocketData) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{10}
}

func (x *RenderableSocketData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RenderableSocketData) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *RenderableSocketData) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *RenderableSocketData) GetType() *RenderType {
	if x != nil {
		return x.Type
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int32 `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{11}
}

func (x *Position) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Position) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Position) GetZ() int32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type CellStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp     int64              `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	CellType      CellType           `protobuf:"varint,2,opt,name=cell_type,json=cellType,proto3,enum=efflux.CellType" json:"cell_type,omitempty"`
	Name          string             `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	RenderId      string             `protobuf:"bytes,4,opt,name=render_id,json=renderId,proto3" json:"render_id,omitempty"`
	Damage        int32              `protobuf:"varint,5,opt,name=damage,proto3" json:"damage,omitempty"`
	SpawnTime     int64              `protobuf:"varint,6,opt,name=spawn_time,json=spawnTime,proto3" json:"spawn_time,omitempty"`
	ViralLoad     int64              `protobuf:"varint,7,opt,name=viral_load,json=viralLoad,proto3" json:"viral_load,omitempty"`
	TransportPath []string           `protobuf:"bytes,8,rep,name=transport_path,json=transportPath,proto3" json:"transport_path,omitempty"`
	WantPath      []string           `protobuf:"bytes,9,rep,name=want_path,json=wantPath,proto3" json:"want_path,omitempty"`
	Proteins      []uint32           `protobuf:"varint,10,rep,packed,name=proteins,proto3" json:"proteins,omitempty"`
	Presented     []uint32           `protobuf:"varint,11,rep,packed,name=presented,proto3" json:"presented,omitempty"`
	CellActions   []CellActionStatus `protobuf:"varint,12,rep,packed,name=cell_actions,json=cellActions,proto3,enum=efflux.CellActionStatus" json:"cell_actions,omitempty"`
}

func (x *CellStatus) Reset() {
	*x = CellStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellStatus) ProtoMessage() {}

func (x *CellStatus) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellStatus.ProtoReflect.Descriptor instead.
func (*CellStatus) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{12}
}

func (x *CellStatus) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CellStatus) GetCellType() CellType {
	if x != nil {
		return x.CellType
	}
	return CellType_CellTypeUnknown
}

func (x *CellStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CellStatus) GetRenderId() string {
	if x != nil {
		return x.RenderId
	}
	return ""
}

func (x *CellStatus) GetDamage() int32 {
	if x != nil {
		return x.Damage
	}
	return 0
}

func (x *CellStatus) GetSpawnTime() int64 {
	if x != nil {
		return x.SpawnTime
	}
	return 0
}

func (x *CellStatus) GetViralLoad() int64 {
	if x != nil {
		return x.ViralLoad
	}
	return 0
}

func (x *CellStatus) GetTransportPath() []string {
	if x != nil {
		return x.TransportPath
	}
	return nil
}

func (x *CellStatus) GetWantPath() []string {
	if x != nil {
		return x.WantPath
	}
	return nil
}

func (x *CellStatus) GetProteins() []uint32 {
	if x != nil {
		return x.Proteins
	}
	return nil
}

func (x *CellStatus) GetPresented() []uint32 {
	if x != nil {
		return x.Presented
	}
	return nil
}

func (x *CellStatus) GetCellActions() []CellActionStatus {
	if x != nil {
		return x.CellActions
	}
	return nil
}

type InteractionLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
}

func (x *InteractionLoginRequest) Reset() {
	*x = InteractionLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionLoginRequest) ProtoMessage() {}

func (x *InteractionLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionLoginRequest.ProtoReflect.Descriptor instead.
func (*InteractionLoginRequest) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{13}
}

func (x *InteractionLoginRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

type InteractionLoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	Expiry       int32  `protobuf:"varint,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
	RenderId     string `protobuf:"bytes,3,opt,name=render_id,json=renderId,proto3" json:"render_id,omitempty"`
}

func (x *InteractionLoginResponse) Reset() {
	*x = InteractionLoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionLoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionLoginResponse) ProtoMessage() {}

func (x *InteractionLoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionLoginResponse.ProtoReflect.Descriptor instead.
func (*InteractionLoginResponse) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{14}
}

func (x *InteractionLoginResponse) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *InteractionLoginResponse) GetExpiry() int32 {
	if x != nil {
		return x.Expiry
	}
	return 0
}

func (x *InteractionLoginResponse) GetRenderId() string {
	if x != nil {
		return x.RenderId
	}
	return ""
}

type InteractionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken string          `protobuf:"bytes,1,opt,name=session_token,json=sessionToken,proto3" json:"session_token,omitempty"`
	Type         InteractionType `protobuf:"varint,2,opt,name=type,proto3,enum=efflux.InteractionType" json:"type,omitempty"`
	Position     *Position       `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
	TargetCell   string          `protobuf:"bytes,4,opt,name=target_cell,json=targetCell,proto3" json:"target_cell,omitempty"`
	CytokineType CytokineType    `protobuf:"varint,5,opt,name=cytokine_type,json=cytokineType,proto3,enum=efflux.CytokineType" json:"cytokine_type,omitempty"`
}

func (x *InteractionRequest) Reset() {
	*x = InteractionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionRequest) ProtoMessage() {}

func (x *InteractionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionRequest.ProtoReflect.Descriptor instead.
func (*InteractionRequest) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{15}
}

func (x *InteractionRequest) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *InteractionRequest) GetType() InteractionType {
	if x != nil {
		return x.Type
	}
	return InteractionType_ping
}

func (x *InteractionRequest) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *InteractionRequest) GetTargetCell() string {
	if x != nil {
		return x.TargetCell
	}
	return ""
}

func (x *InteractionRequest) GetCytokineType() CytokineType {
	if x != nil {
		return x.CytokineType
	}
	return CytokineType_unknown
}

type InteractionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               InteractionType            `protobuf:"varint,1,opt,name=type,proto3,enum=efflux.InteractionType" json:"type,omitempty"`
	Status             InteractionResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=efflux.InteractionResponse_Status" json:"status,omitempty"`
	ErrorMessage       string                     `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	AttachedTo         string                     `protobuf:"bytes,4,opt,name=attached_to,json=attachedTo,proto3" json:"attached_to,omitempty"`
	TargetCellStatus   *CellStatus                `protobuf:"bytes,5,opt,name=target_cell_status,json=targetCellStatus,proto3" json:"target_cell_status,omitempty"`
	AttachedCellStatus *CellStatus                `protobuf:"bytes,6,opt,name=attached_cell_status,json=attachedCellStatus,proto3" json:"attached_cell_status,omitempty"`
}

func (x *InteractionResponse) Reset() {
	*x = InteractionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_efflux_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InteractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractionResponse) ProtoMessage() {}

func (x *InteractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_efflux_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractionResponse.ProtoReflect.Descriptor instead.
func (*InteractionResponse) Descriptor() ([]byte, []int) {
	return file_efflux_proto_rawDescGZIP(), []int{16}
}

func (x *InteractionResponse) GetType() InteractionType {
	if x != nil {
		return x.Type
	}
	return InteractionType_ping
}

func (x *InteractionResponse) GetStatus() InteractionResponse_Status {
	if x != nil {
		return x.Status
	}
	return InteractionResponse_failure
}

func (x *InteractionResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *InteractionResponse) GetAttachedTo() string {
	if x != nil {
		return x.AttachedTo
	}
	return ""
}

func (x *InteractionResponse) GetTargetCellStatus() *CellStatus {
	if x != nil {
		return x.TargetCellStatus
	}
	return nil
}

func (x *InteractionResponse) GetAttachedCellStatus() *CellStatus {
	if x != nil {
		return x.AttachedCellStatus
	}
	return nil
}

var File_efflux_proto protoreflect.FileDescriptor

var file_efflux_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x66, 0x66, 0x6c,
	0x75, 0x78, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x5e, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6c, 0x6f,
	0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x6c, 0x75, 0x63, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x6c,
	0x75, 0x63, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x76, 0x69, 0x74, 0x61, 0x6d, 0x69, 0x6e,
	0x73, 0x22, 0x48, 0x0a, 0x13, 0x57, 0x61, 0x73, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x11, 0x0a, 0x04, 0x63, 0x5f, 0x6f, 0x32,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x63, 0x4f, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x22, 0x83, 0x02, 0x0a, 0x15,
	0x48, 0x6f, 0x72, 0x6d, 0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x25, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x6f,
	0x63, 0x79, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x79, 0x5f, 0x73, 0x74, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x22, 0x67, 0x72, 0x61, 0x6e, 0x75, 0x6c, 0x6f, 0x63, 0x79, 0x74,
	0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x79, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4f, 0x0a, 0x24, 0x6d, 0x61, 0x63, 0x72,
	0x6f, 0x70, 0x68, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x79, 0x5f, 0x73, 0x74,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x6d, 0x61, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x79, 0x53, 0x74, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6c, 0x65, 0x75, 0x6b, 0x69, 0x6e, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x75, 0x6b, 0x69, 0x6e, 0x33, 0x12, 0x22, 0x0a,
	0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x75, 0x6b, 0x69, 0x6e, 0x32, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x75, 0x6b, 0x69, 0x6e,
	0x32, 0x22, 0x7d, 0x0a, 0x15, 0x41, 0x6e, 0x74, 0x69, 0x67, 0x65, 0x6e, 0x42, 0x6c, 0x6f, 0x62,
	0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6e,
	0x74, 0x69, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x61, 0x6e, 0x74, 0x69, 0x62, 0x6f, 0x64, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x61, 0x6e, 0x74, 0x69, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x61, 0x6e, 0x74, 0x69, 0x62, 0x6f,
	0x64, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xf8, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x66,
	0x66, 0x6c, 0x75, 0x78, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x6c, 0x6f,
	0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x77, 0x61, 0x73, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x57,
	0x61, 0x73, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x05, 0x77, 0x61, 0x73, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x68, 0x6f, 0x72,
	0x6d, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x66, 0x66,
	0x6c, 0x75, 0x78, 0x2e, 0x48, 0x6f, 0x72, 0x6d, 0x6f, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x62, 0x53,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x68, 0x6f, 0x72, 0x6d, 0x6f,
	0x6e, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x6e, 0x74, 0x69, 0x67, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x41, 0x6e, 0x74,
	0x69, 0x67, 0x65, 0x6e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x07, 0x61, 0x6e, 0x74, 0x69, 0x67, 0x65, 0x6e, 0x22, 0x83, 0x02, 0x0a, 0x14,
	0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x94, 0x03, 0x0a, 0x18, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6f, 0x32, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x6c, 0x75, 0x63, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x67, 0x6c, 0x75, 0x63, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x74, 0x61,
	0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x69, 0x74, 0x61, 0x6d,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x6f, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x63, 0x6f, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x69,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x77, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x75, 0x6e, 0x67, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x75,
	0x6e, 0x67, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x73, 0x70, 0x68, 0x79, 0x78, 0x69, 0x61,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x73, 0x70, 0x68, 0x79, 0x78, 0x69, 0x61,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x6d, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6c, 0x61, 0x6d, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x5f, 0x63, 0x73, 0x66, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x67, 0x43, 0x73, 0x66, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x5f, 0x63,
	0x73, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x43, 0x73, 0x66, 0x12, 0x11,
	0x0a, 0x04, 0x69, 0x6c, 0x5f, 0x33, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x69, 0x6c,
	0x33, 0x12, 0x11, 0x0a, 0x04, 0x69, 0x6c, 0x5f, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x69, 0x6c, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x72, 0x61, 0x6c, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x69, 0x72, 0x61, 0x6c, 0x4c,
	0x6f, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x74, 0x69, 0x62, 0x6f, 0x64, 0x79, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6e, 0x74, 0x69,
	0x62, 0x6f, 0x64, 0x79, 0x4c, 0x6f, 0x61, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x10, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x0f, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x65, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x79, 0x74, 0x6f, 0x6b, 0x69, 0x6e,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65,
	0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x43, 0x79, 0x74, 0x6f, 0x6b, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x79, 0x74, 0x6f, 0x6b, 0x69, 0x6e, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x6e, 0x61, 0x6e, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75,
	0x78, 0x2e, 0x4e, 0x61, 0x6e, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x66, 0x66, 0x6c,
	0x75, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a,
	0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x7a, 0x22, 0x9b, 0x03, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x2d, 0x0a, 0x09, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x43, 0x65, 0x6c,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x70,
	0x61, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x72, 0x61, 0x6c,
	0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x76, 0x69, 0x72,
	0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x69, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x66, 0x66,
	0x6c, 0x75, 0x78, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x3e, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x74, 0x0a, 0x18, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xf0, 0x01, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x12,
	0x39, 0x0a, 0x0d, 0x63, 0x79, 0x74, 0x6f, 0x6b, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e,
	0x43, 0x79, 0x74, 0x6f, 0x6b, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x79,
	0x74, 0x6f, 0x6b, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0xf0, 0x02, 0x0a, 0x13, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54,
	0x6f, 0x12, 0x40, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x65, 0x6c, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x14, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x65, 0x66, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x22, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x01, 0x2a, 0xca, 0x03,
	0x0a, 0x08, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x65,
	0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x61, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x42, 0x61, 0x63, 0x74, 0x65, 0x72, 0x6f, 0x69, 0x64, 0x6f, 0x74, 0x61, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x6f, 0x64, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x65, 0x75, 0x72, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x61, 0x72,
	0x64, 0x69, 0x6f, 0x6d, 0x79, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x6e, 0x65, 0x75, 0x6d, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07,
	0x4d, 0x79, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x6f, 0x64, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x65, 0x6d,
	0x6f, 0x63, 0x79, 0x74, 0x6f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b,
	0x4c, 0x79, 0x6d, 0x70, 0x68, 0x6f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x10, 0x0c, 0x12, 0x0e, 0x0a,
	0x0a, 0x4d, 0x79, 0x65, 0x6c, 0x6f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x10, 0x0d, 0x12, 0x0c, 0x0a,
	0x08, 0x4d, 0x6f, 0x6e, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x4d,
	0x61, 0x63, 0x72, 0x6f, 0x70, 0x68, 0x61, 0x67, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x0f, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x65, 0x6e, 0x64, 0x72, 0x69, 0x74, 0x69, 0x63, 0x10, 0x10, 0x12, 0x0e,
	0x0a, 0x0a, 0x4e, 0x65, 0x75, 0x74, 0x72, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x11, 0x12, 0x15,
	0x0a, 0x11, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x43,
	0x65, 0x6c, 0x6c, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x69, 0x72, 0x67, 0x69, 0x6e, 0x54,
	0x4c, 0x79, 0x6d, 0x70, 0x68, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11,
	0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x54, 0x4c, 0x79, 0x6d, 0x70, 0x68, 0x6f, 0x63, 0x79, 0x74,
	0x65, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x69, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x4c, 0x79,
	0x6d, 0x70, 0x68, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4c,
	0x79, 0x6d, 0x70, 0x68, 0x6f, 0x63, 0x79, 0x74, 0x65, 0x10, 0x16, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x4c, 0x79, 0x6d, 0x70, 0x68, 0x6f, 0x63, 0x79,
	0x74, 0x65, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x61, 0x6c, 0x4c, 0x6f, 0x61,
	0x64, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x10, 0x18, 0x2a, 0x82, 0x01, 0x0a, 0x08, 0x57,
	0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x69, 0x66, 0x66, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x65, 0x78, 0x68, 0x61, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x75, 0x6d, 0x70,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05,
	0x74, 0x68, 0x69, 0x6e, 0x6b, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x09, 0x2a,
	0x7b, 0x0a, 0x0c, 0x43, 0x79, 0x74, 0x6f, 0x6b, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x61, 0x6e, 0x74, 0x69, 0x67, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x69, 0x6e, 0x64, 0x75, 0x63, 0x65, 0x5f,
	0x63, 0x68, 0x65, 0x6d, 0x6f, 0x74, 0x61, 0x78, 0x69, 0x73, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x63, 0x79, 0x74, 0x6f, 0x74, 0x6f, 0x78, 0x69, 0x6e, 0x73, 0x10, 0x05, 0x2a, 0x2e, 0x0a, 0x0b,
	0x4e, 0x61, 0x6e, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4e,
	0x61, 0x6e, 0x6f, 0x62, 0x6f, 0x74, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x61, 0x6e, 0x6f, 0x62, 0x6f, 0x74, 0x10, 0x01, 0x2a, 0x85, 0x01, 0x0a,
	0x10, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x69, 0x6e, 0x63, 0x75, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x64, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x61, 0x70, 0x6f, 0x70, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x64,
	0x6f, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x69, 0x74, 0x6f, 0x73,
	0x69, 0x73, 0x10, 0x07, 0x2a, 0x74, 0x0a, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x10, 0x05, 0x12, 0x08, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x63, 0x79, 0x74, 0x6f, 0x6b, 0x69, 0x6e, 0x65, 0x10, 0x07, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f,
	0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_efflux_proto_rawDescOnce sync.Once
	file_efflux_proto_rawDescData = file_efflux_proto_rawDesc
)

func file_efflux_proto_rawDescGZIP() []byte {
	file_efflux_proto_rawDescOnce.Do(func() {
		file_efflux_proto_rawDescData = protoimpl.X.CompressGZIP(file_efflux_proto_rawDescData)
	})
	return file_efflux_proto_rawDescData
}

var file_efflux_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_efflux_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_efflux_proto_goTypes = []interface{}{
	(CellType)(0),                    // 0: efflux.CellType
	(WorkType)(0),                    // 1: efflux.WorkType
	(CytokineType)(0),                // 2: efflux.CytokineType
	(NanobotType)(0),                 // 3: efflux.NanobotType
	(CellActionStatus)(0),            // 4: efflux.CellActionStatus
	(InteractionType)(0),             // 5: efflux.InteractionType
	(InteractionResponse_Status)(0),  // 6: efflux.InteractionResponse.Status
	(*WorkSocketData)(nil),           // 7: efflux.WorkSocketData
	(*ResourceBlobSocketData)(nil),   // 8: efflux.ResourceBlobSocketData
	(*WasteBlobSocketData)(nil),      // 9: efflux.WasteBlobSocketData
	(*HormoneBlobSocketData)(nil),    // 10: efflux.HormoneBlobSocketData
	(*AntigenBlobSocketData)(nil),    // 11: efflux.AntigenBlobSocketData
	(*DiffusionSocketData)(nil),      // 12: efflux.DiffusionSocketData
	(*WorkStatusSocketData)(nil),     // 13: efflux.WorkStatusSocketData
	(*MaterialStatusSocketData)(nil), // 14: efflux.MaterialStatusSocketData
	(*StatusSocketData)(nil),         // 15: efflux.StatusSocketData
	(*RenderType)(nil),               // 16: efflux.RenderType
	(*RenderableSocketData)(nil),     // 17: efflux.RenderableSocketData
	(*Position)(nil),                 // 18: efflux.Position
	(*CellStatus)(nil),               // 19: efflux.CellStatus
	(*InteractionLoginRequest)(nil),  // 20: efflux.InteractionLoginRequest
	(*InteractionLoginResponse)(nil), // 21: efflux.InteractionLoginResponse
	(*InteractionRequest)(nil),       // 22: efflux.InteractionRequest
	(*InteractionResponse)(nil),      // 23: efflux.InteractionResponse
}
var file_efflux_proto_depIdxs = []int32{
	12, // 0: efflux.WorkSocketData.diffusion:type_name -> efflux.DiffusionSocketData
	8,  // 1: efflux.DiffusionSocketData.resources:type_name -> efflux.ResourceBlobSocketData
	9,  // 2: efflux.DiffusionSocketData.waste:type_name -> efflux.WasteBlobSocketData
	10, // 3: efflux.DiffusionSocketData.hormone:type_name -> efflux.HormoneBlobSocketData
	11, // 4: efflux.DiffusionSocketData.antigen:type_name -> efflux.AntigenBlobSocketData
	13, // 5: efflux.StatusSocketData.work_status:type_name -> efflux.WorkStatusSocketData
	14, // 6: efflux.StatusSocketData.material_status:type_name -> efflux.MaterialStatusSocketData
	0,  // 7: efflux.RenderType.cell_type:type_name -> efflux.CellType
	2,  // 8: efflux.RenderType.cytokine_type:type_name -> efflux.CytokineType
	3,  // 9: efflux.RenderType.nanobot_type:type_name -> efflux.NanobotType
	18, // 10: efflux.RenderableSocketData.position:type_name -> efflux.Position
	16, // 11: efflux.RenderableSocketData.type:type_name -> efflux.RenderType
	0,  // 12: efflux.CellStatus.cell_type:type_name -> efflux.CellType
	4,  // 13: efflux.CellStatus.cell_actions:type_name -> efflux.CellActionStatus
	5,  // 14: efflux.InteractionRequest.type:type_name -> efflux.InteractionType
	18, // 15: efflux.InteractionRequest.position:type_name -> efflux.Position
	2,  // 16: efflux.InteractionRequest.cytokine_type:type_name -> efflux.CytokineType
	5,  // 17: efflux.InteractionResponse.type:type_name -> efflux.InteractionType
	6,  // 18: efflux.InteractionResponse.status:type_name -> efflux.InteractionResponse.Status
	19, // 19: efflux.InteractionResponse.target_cell_status:type_name -> efflux.CellStatus
	19, // 20: efflux.InteractionResponse.attached_cell_status:type_name -> efflux.CellStatus
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_efflux_proto_init() }
func file_efflux_proto_init() {
	if File_efflux_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_efflux_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkSocketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceBlobSocketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WasteBlobSocketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HormoneBlobSocketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntigenBlobSocketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffusionSocketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkStatusSocketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaterialStatusSocketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusSocketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenderableSocketData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionLoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_efflux_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InteractionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_efflux_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*RenderType_CellType)(nil),
		(*RenderType_CytokineType)(nil),
		(*RenderType_NanobotType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_efflux_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_efflux_proto_goTypes,
		DependencyIndexes: file_efflux_proto_depIdxs,
		EnumInfos:         file_efflux_proto_enumTypes,
		MessageInfos:      file_efflux_proto_msgTypes,
	}.Build()
	File_efflux_proto = out.File
	file_efflux_proto_rawDesc = nil
	file_efflux_proto_goTypes = nil
	file_efflux_proto_depIdxs = nil
}
